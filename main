#lang racket

;merge sort brought to you by https://blog.racket-lang.org/2012/08/fully-inlined-merge-sort.html
;racket documentation for the rest
; CONNOR SCHAFER CS441

(define (merge as bs)
  (match* (as bs)
    [((list) bs)  bs]
    [(as (list))  as]
    [((list a as ...) (list b bs ...))
     (if (< a b)
         (cons a (merge as (cons b bs)))
         (cons b (merge (cons a as) bs)))]))

(define (merge-sort vs)
  (match vs
    [(list)  vs]
    [(list a)  vs]
    [_  (define-values (lvs rvs)
          (split-at vs (quotient (length vs) 2)))
        
        ;(merge (merge-sort lvs) (merge-sort rvs))]))
        (touch (future (lambda() (merge (merge-sort lvs) (merge-sort rvs)))))]))


(define (main)
  (time
(define p
  (place ch
     (define one (place-channel-get ch))
        (place-channel-put ch (merge-sort one))))      
   (place-channel-put p(file->list "numbers.txt"))
   (place-channel-get p)
  (void))
  ;(print p)
  )
 
